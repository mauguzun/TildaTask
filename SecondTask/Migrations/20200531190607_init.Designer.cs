// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecondTask.Models;

namespace SecondTask.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200531190607_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SecondTask.Models.BankUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "2c180c47-599a-4d5e-a340-855648ef6192",
                            Email = "user0@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user0@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/iWfjEn5JcMklpXuQwKdGCBZPyFZIZPyeOusJT8xt8tU9JNMTFnxnNDXOJmLsZlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71d92b13-3926-4e67-86ed-48a99d3c2012",
                            TwoFactorEnabled = false,
                            UserName = "user 0"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "86f657b9-a034-49c3-a682-c33683f95388",
                            Email = "user1@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAECFTF+E3tGpKdu0tS+Hqg9wLIJSFWdRDhKds/ia97HNWrCjRV5Tp2oxhbqX/vGM4QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b117215e-17f5-45bc-9e09-6ae55ce6fa28",
                            TwoFactorEnabled = false,
                            UserName = "user 1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "64735e6e-9045-4864-9eac-ecc518f4878f",
                            Email = "user2@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEFLKfdxlCJZbBaeL5Cop+2Z81ZJKynwnxAw4Dl6WEdio4NuB7tFnz3+fNbzfWxmGww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cfb2ff7-fe07-48f9-864e-d6dca647803d",
                            TwoFactorEnabled = false,
                            UserName = "user 2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "0e6ab433-5700-42a0-afa2-628a38b7dd88",
                            Email = "user3@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAENhf30pTRBe+9A8PHAQlyaVGPrMuKOt7KK+t0o0O4fAJ/AcInwCzWveJNBHv6VxVqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1ad4a4c-d74f-4e8e-8338-f781ff82b433",
                            TwoFactorEnabled = false,
                            UserName = "user 3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "a36c73f0-8993-430e-8348-2dafb64a96ea",
                            Email = "user4@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEPr12vKc5Gwszc8PRVt+FmILwuGzfwSd8Wo3IIIuUtuNj1GmunGWzLjwu1XcnBTBDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6595df45-f935-4e68-b93c-2338777e6094",
                            TwoFactorEnabled = false,
                            UserName = "user 4"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "3582c96e-45c4-4fbc-bea2-1f7666adea61",
                            Email = "user5@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqmdJZiCjlgqnb5s9fUAaXKQZ7+G1E92mNpKRPWWASwY1Djp/oJlEx6DCa3ZH7Nmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c88c8314-9d7d-40ce-9d31-fad8598d0de4",
                            TwoFactorEnabled = false,
                            UserName = "user 5"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "ad7eacd5-5d1b-4eb5-87cc-129bb4bc2f52",
                            Email = "user6@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEL1xaHi3EOG94ENH32PxlNg9oweZgEJMBOaqkpITUZCWBajClz0W9nmFqpMO0pYwsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccab243c-580e-44c3-a08d-7daebd5406e7",
                            TwoFactorEnabled = false,
                            UserName = "user 6"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "f3d4ca02-9e24-4379-925a-447d93be9231",
                            Email = "user7@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user7@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEEQ3OpHGsBg1tAn7x+JjHgmYC4H9deBDmCu+vm8DQrisf7H4pGUM3saV7f10nwfCbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f1aca07-e54e-4d33-b82c-f81eec21682d",
                            TwoFactorEnabled = false,
                            UserName = "user 7"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "61960215-0ab4-45f8-a708-284541cf4e94",
                            Email = "user8@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user8@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6uSNykeBmTVGyN6aTk77l0q6jiJmhUjpMeMT3scmhlKQSbe/VgdcPddyn3mOw8SA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb424ace-edc4-40f2-81b2-ba285927fa17",
                            TwoFactorEnabled = false,
                            UserName = "user 8"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Amount = 1000,
                            ConcurrencyStamp = "10888979-10c6-4857-8983-e071aacc2351",
                            Email = "user9@user.ma",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user9@user.ma",
                            PasswordHash = "AQAAAAEAACcQAAAAEL8JHJYJX2my2K0q0biLm7fEy2S+GwQVfm2Zt0lrSl+/WhDi4OP8uSrwdZnfIZYjTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b43218b5-6974-4fb6-bf6d-9010cb4a5276",
                            TwoFactorEnabled = false,
                            UserName = "user 9"
                        });
                });

            modelBuilder.Entity("SecondTask.Models.BankUserTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DebitorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BankUserTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SecondTask.Models.BankUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SecondTask.Models.BankUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecondTask.Models.BankUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SecondTask.Models.BankUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
